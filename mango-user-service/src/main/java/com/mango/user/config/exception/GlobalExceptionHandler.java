package com.mango.user.config.exception;import com.alibaba.fastjson.support.spring.FastJsonJsonView;import com.google.common.collect.Maps;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpStatus;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.multipart.MaxUploadSizeExceededException;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import java.util.Map;/** * 全局异常捕获 * */@Slf4j@ControllerAdvicepublic class GlobalExceptionHandler {    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalExceptionHandler.class);    private static final Logger SERVICE_LOGGER = LoggerFactory.getLogger(ServiceException.class);    /**     * 异常捕获     *     * @param ex      异常信息     * @param request 请求信息     * @return 处理结果     */    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)    @ExceptionHandler(value = {Exception.class})    public ModelAndView handleException(Exception ex, HttpServletRequest request) {        LOGGER.error("系统发生异常，请求地址为：{}", request.getRequestURL().toString(), ex);        if (ex instanceof ServiceException) {            String message = "业务处理失败，原因：" + ex.getLocalizedMessage();            SERVICE_LOGGER.info(message);            return this.handleExceptionResult(((ServiceException) ex).getCode(), ex.getMessage());        }        return this.handleExceptionResult(ServiceException.ERROR_CODE, "系统内部发生错误");    }    /**     * 文件上传异常捕获     *     * @param ex 异常信息     * @return 处理结果     */    @ExceptionHandler(MaxUploadSizeExceededException.class)    public ModelAndView handlerMaxUploadFile(MaxUploadSizeExceededException ex) {        log.error(ex.getMessage(), ex);        return this.handleExceptionResult(ServiceException.ERROR_CODE, "文件上传大小不能超过10MB");    }    /**     * 统一处理异常返回     *     * @param code    错误代码     * @param message 错误消息     * @return 处理结果     */    private ModelAndView handleExceptionResult(Integer code, String message) {        Map<String, Object> model = Maps.newHashMap();        model.put("code", code);        model.put("message", message);        // 使用FastJson提供的FastJsonJsonView视图返回，不需要捕获异常        FastJsonJsonView view = new FastJsonJsonView();        view.setAttributesMap(model);        return new ModelAndView(view);    }}